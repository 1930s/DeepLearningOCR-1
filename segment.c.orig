/*
segment.c: chop the raster into pieces.

Copyright Â© Raphael Finkel 2007-2010 raphael@cs.uky.edu  

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "ocr.h"

// for the world
int header, spacer, lineWidth;
int numLines;
int leftMargin, rightMargin, glyphWidth, glyphHeight;
lineHeaderList *lineHeaders; // with a dummy at the front

// for this file
float averageLineHeight;

// returns if row is blank in range [startCol, endCol).
static int isBlankRow(row, startCol, endCol) {
	int col;
	for (col = startCol; col < endCol; col += 1) {
		if (image[AT(row, col)]) {
			// fprintf(stderr, "not blank row, as seen at %d,%d\n", row, col);
			return(false);
		}
	} // each col
	return(true);
} // isBlankRow

#define SKIPBLANKLINES \
	do { \
		for (; row < height; row += 1) { \
			if (!isBlankRow(row, 0, width)) break; \
		} \
	} while (0)

#define SKIPNONBLANKLINES \
	do { \
		for (; row < height; row += 1) { \
			if (isBlankRow(row, 0, width)) break; \
		} \
	} while (0)

#define SKIPBLANKCOLS \
	do { \
		for (; col < width; col += 1) { \
			if (!isBlankCol(top, bottom, col)) break; \
		} \
	} while (0)

#define SKIPNONBLANKCOLS \
	do { \
		for (; col < width; col += 1) { \
			if (isBlankCol(top, bottom, col)) break; \
		} \
	} while (0)

static int isBlankCol(int topRow, int bottomRow, int col) {
	int row;
	for (row = topRow; row < bottomRow; row += 1) {
		if (image[AT(row, col)]) {
			// fprintf(stderr, "not blank column: %d,%d\n", row, col);
			return(false);
		}
	} // each col
	return(true);
} // isBlankCol

static int countNonBlankCol(int topRow, int bottomRow, int col) {
	// return how many cells in column are not blank
	int answer = 0;
	int row;
	for (row = topRow; row < bottomRow; row += 1) {
		if (image[AT(row, col)]) {
			answer += 1;
		}
	} // each col
	return(answer);
} // countNonBlankCol

#ifdef undef
static int countBits(int topRow, int bottomRow, int col) {
	int answer = 0;
	int row;
	for (row = topRow; row < bottomRow; row += 1) {
		if (image[AT(row, col)]) answer += 1;
	} // each col
	return(answer);
} // countBits
#endif

void showGlyphs(textLine *theLine, const char *msg) { // debugging output
	fprintf(stderr, "%s: line at y values [%d,%d]\n", msg, theLine->top,
		theLine->bottom);
	glyph_t *theGlyph;
	for (theGlyph = theLine->glyphs->next; theGlyph; theGlyph = theGlyph->next) {
		int fillingNow = 0;
		if (!theGlyph->tuple) {
			theGlyph->tuple = newTuple();
			fillTuple(theGlyph, theGlyph->tuple);
			fillingNow = 1;
		}
		fprintf(stderr, "\tx=[%d,%d] y=[%d,%d] %s\n",
			theGlyph->left, theGlyph->right,
			theGlyph->top, theGlyph->bottom,
			ocrValue(theGlyph->tuple)
			);
		if (fillingNow) {
			free(theGlyph->tuple);
			theGlyph->tuple = NULL;
		}
	} // one line
	fprintf(stderr, "\n");
} // showGlyphs

void showLines(lineHeaderList *theLines) { // debugging output
	lineHeaderList *curLine;
	fprintf(stderr, "Current lines\n");
	int lineNumber = 0;
	for (curLine = theLines->next; curLine; curLine=curLine->next) {
		fprintf(stderr, "\tline between y=(%d,%d)\n", curLine->line->top,
			curLine->line->bottom);
		// showGlyphs(curLine->line, "contents");
		lineNumber += 1;
	} // one line
} // showLines

int totalWidth = 0, totalHeight = 0, glyphCount = 0;

void insertGlyph(int left, int right, int top, int bottom, lineHeaderList *theLineList) {
	// right and bottom are 1 beyond the edge.
	// fprintf(stderr, "Inserting a glyph at (%d,%d)\n", left, top);
	// statistics
	leftMargin = MIN(leftMargin, left);
	rightMargin = MAX(rightMargin, right);
	totalWidth += right - left;
	totalHeight += bottom - top;
	glyphCount += 1;
	glyphWidth = totalWidth / glyphCount;
	glyphHeight = totalHeight / glyphCount;
	// allocate
	glyph_t *newGlyphPtr = (glyph_t *) malloc(sizeof(glyph_t));
	// initialize
	newGlyphPtr->left = left;
	newGlyphPtr->right = right;
	newGlyphPtr->top = top;
	newGlyphPtr->bottom = bottom;
	newGlyphPtr->lineHeight = 0; // filled in at a later step
	newGlyphPtr->distance = -1; // changed when we paint rectangle
	newGlyphPtr->tuple = NULL; // filled at a later step
	newGlyphPtr->next = NULL;
	// place in appropriate line
	lineHeaderList *curLineHeader; // one before (above) the line we are looking at
	int success = 0;
	for (curLineHeader = theLineList; curLineHeader->next;
			curLineHeader = curLineHeader->next) { // each known line
		textLine *tryLine = curLineHeader->next->line; // the one we are looking at
		// fprintf(stderr, "trying a line between (%d,%d)\n", tryLine->top,
		// 	tryLine->bottom);
		if (tryLine->top > bottom) break; // we have gone too far; need new line
		if ((tryLine->top <= top && tryLine->bottom >= top)
		 || (tryLine->bottom >= bottom && tryLine->top <= bottom)
		 || (tryLine->top >= top && tryLine->bottom <= bottom) // within existing
		 || (tryLine->top <= top && tryLine->bottom >= bottom) // contains existing
		 ) {
		 	// appropriate line
			// fprintf(stderr, "line is appropriate\n");
			/* // make a new line if the glyph doesn't overlap this line well
			float overlap = MIN(tryLine->bottom - top, bottom - tryLine->top);
			if (overlap / (tryLine->bottom - tryLine->top) < 0.3 &&
				overlap > (bottom-top)/2 ) {
				// too dissimilar to current line; use another or make new
				fprintf(stderr, "lines dissimilar\n");
				continue;
			}
			*/
			tryLine->top = MIN(tryLine->top, top);
			tryLine->bottom = MAX(tryLine->bottom, bottom);
			tryLine->leftBorder = MIN(tryLine->leftBorder, left);
			tryLine->rightBorder = MAX(tryLine->rightBorder, right);
			glyph_t *curGlyphPtr; // first entry in line is a dummy
			for (curGlyphPtr = tryLine->glyphs; curGlyphPtr->next; 
					curGlyphPtr = curGlyphPtr->next) { // each known glyph on line
				// fprintf(stderr, "trying a glyph at %d\n",
				//  	curGlyphPtr->next->left);
				if (curGlyphPtr->next->left > left) {
					newGlyphPtr->next = curGlyphPtr->next;
					// fprintf(stderr,
					// 	"position is appropriate: place [%d,%d] before [%d,%d]\n",
					// 	left, right, curGlyphPtr->next->left, curGlyphPtr->next->right);
					// fprintf(stderr, "distance from neigbor in x: %d y: %d\n",
					// 	newGlyphPtr->next->left - right,
					// 	MIN(abs(newGlyphPtr->next->bottom - bottom), 
					// 		abs(newGlyphPtr->next->top - top))
					// 	);
					break; // we found the right position in line
				}
			} // each known glyph on line
			curGlyphPtr->next = newGlyphPtr; // whether we fell off the end or not
			success = 1;
			break; // we found the right line
		} // tryLine is the appropriate line
	} // each known line
	if (!success) { // we need to start a new line
		// fprintf(stderr, "starting a new line\n");
		lineHeaderList *newLineHeader =
			(lineHeaderList *) malloc(sizeof(lineHeaderList));
		newLineHeader->next = curLineHeader->next; // even if empty
		curLineHeader->next = newLineHeader;
		newLineHeader->line = (textLine *) malloc(sizeof(textLine));
		newLineHeader->line->top = top;
		newLineHeader->line->bottom = bottom;
		newLineHeader->line->leftBorder = left;
		newLineHeader->line->rightBorder = right;
		newLineHeader->line->glyphs = (glyph_t *) malloc(sizeof(glyph_t)); // dummy
		newLineHeader->line->glyphs->next = newGlyphPtr;
	} // starting a new line
	// fprintf(stderr, "exiting insertGlyph\n"); // breakpoint spot
	// showLines(); // debug
	// float distance;
	// const glyph_t *neighbor;
	// distance = p_closestGlyph(newGlyphPtr, &neighbor);
	// p_insertGlyph(newGlyphPtr);
} // insertGlyph

void findCells(top, bottom, left, right) {
	// try to find regions within the given boundaries that are single glyphs
	// trim white space above.  bottom and right are at the borders, not beyond.
	// fprintf(stderr, "top %d bottom %d left %d right %d\n", top, bottom, left,
	// 	right);
	for (; left <= right; left += 1) {
		if (!isBlankCol(top, bottom, left)) break;
	}
	for (; left <= right; right -= 1) {
		if (!isBlankCol(top, bottom, right)) break;
	}
	for (; top <= bottom; top += 1) {
		if (!isBlankRow(top, left, right)) break;
	}
	for (; top <= bottom; bottom -= 1) {
		if (!isBlankRow(bottom, left, right)) break;
	}
	// fprintf(stderr, "after trim: top %d bottom %d left %d right %d\n", top,
	// 	bottom, left, right);
	if (right+1-left < minGlyphWidth || bottom+1-top < minGlyphHeight) {
		// fprintf(stdout, "too small (%dx%d=%d); returning\n", right-left,
		// 	bottom-top, (bottom-top)*(right-left));
		return;
	}
	// look for horizontal white area as close to the middle as possible
	int mid = (bottom+1+top) / 2;
	for (; mid < bottom; mid += 1) {
		if (isBlankRow(mid, left, right)) break;
	}
	if (mid < bottom) {
		findCells(mid+1, bottom, left, right);
		// lower half first for efficiency
		findCells(top, mid-1, left, right);
		return;
	}
	for (; mid > top; mid -= 1) {
		if (isBlankRow(mid, left, right)) break;
	}
	if (mid > top) {
		findCells(mid+1, bottom, left, right);
		findCells(top, mid-1, left, right);
		return;
	}
	// look for vertical white area as close to the middle as possible
	mid = (right+left) / 2;
	for (; mid < right; mid += 1) {
		if (isBlankCol(top, bottom, mid)) break;
	}
	if (mid < right) {
		findCells(top, bottom, mid+1, right); // right half first for efficiency
		findCells(top, bottom, left, mid-1);
		return;
	}
	mid = (right+left) / 2;
	for (; mid > left; mid -= 1) {
		if (isBlankCol(top, bottom, mid)) break;
	}
	if (mid > left) {
		findCells(top, bottom, mid+1, right); // right half first for efficiency
		findCells(top, bottom, left, mid-1);
		return;
	}
	if ((right+1-left > maxGlyphWidth) || (bottom-top > maxGlyphHeight)) {
		fprintf(stderr, "\ttoo large: from (%d,%d) to (%d,%d)\n",
		 	left, top, right, bottom);
		return;
	}
	// fprintf(stderr, "glyph found, tight bounds x=[%d,%d], y=[%d,%d]\n",
	// 	left, right, top, bottom);
	insertGlyph(left, right+1, top, bottom+1, lineHeaders);
} // findCells

int overlapHorizontal(glyph_t *first, glyph_t *second) {
	// fprintf(stderr, "in overlapHorizontal\n");
	if (!first || !second) return 0;
	// fprintf(stderr, "\tThere is both a first and second line\n");
	if ((first->right >= second->left && first->right <= second->right)
		||
	   (second->right >= first->left && second->right <= first->right)) {
	   // there is a horizontal overlap
		// fprintf(stderr, "\toverlap: [x=%d,x=%d] overlaps [x=%d,x=%d]\n",
		// 	first->left, first->right, second->left, second->right);
		int newHeight =
			MIN(first->top - second->bottom, second->top - first->bottom);
		if (newHeight > glyphHeight/2 || newHeight > maxGlyphHeight) {
			// too distant vertically
			// fprintf(stderr,
			// 	"\tat (%d,%d) too distant vertically (%d) to combine\n",
			// 	first->left, first->top,
			// 	MAX(first->top - second->bottom, second->top - first->bottom));
			return(false);
		}
		// fprintf(stderr, "\twill combine\n");
		return(true);
	} // horizontal overlap
	return 0;
} // overlapHorizontal

int lineHeight(lineHeaderList *aLine) {
	int answer = aLine->line->bottom - aLine->line->top;
	// fprintf(stderr, "line height: %d\n", answer);
	return(answer);
} // lineHeight

// returns boolean: true if the two lines either overlap vertically or
// combining them wouldn't largely increase the height of the taller.
int overlapVertical(lineHeaderList *first, lineHeaderList *second) {
	if (!first || !second) return 0;
	textLine *f = first->line;
	textLine *s = second->line;
	// if (f->top >= s->top && f->bottom <= s->bottom) return true;
	// if (s->top >= f->top && s->bottom <= f->bottom) return true;
	if (f->bottom >= s->top && f->bottom <= s->bottom) return true;
		// s within f
	if (s->bottom >= f->top && s->bottom <= f->bottom) return true;
		// f within s
	// int largerHeight = MAX(lineHeight(first), lineHeight(second));
	int combinedHeight = MAX(f->bottom, s->bottom) - MIN(f->top, s->top);
	if (combinedHeight < 2*glyphHeight) return true;
	// fprintf(stderr,
	// 	"combined height %d, glyphHeight %d\n",
	// 	combinedHeight, glyphHeight);
	return 0;
} // overlapVertical

void refillLine(lineHeaderList *aLineHeader) {
	// refill all tuples in the line
	glyph_t	*curGlyphPtr;
	for (curGlyphPtr = aLineHeader->line->glyphs->next; curGlyphPtr->next; 
				curGlyphPtr = curGlyphPtr->next) { // each actual glyph on line
		if (curGlyphPtr->tuple)
			refillTuple(curGlyphPtr, curGlyphPtr->tuple);
	}
} // refillLine

void adjustLineStats(textLine *aLine) {
	glyph_t *curGlyphPtr;
	int top=INFINITY, bottom=-INFINITY, left=INFINITY, right=-INFINITY;
	// fprintf(stderr, "adjusting line ");
	for (curGlyphPtr = aLine->glyphs->next; curGlyphPtr; 
			curGlyphPtr = curGlyphPtr->next) { // each glyph on line
		// fprintf(stderr, "(%d, %d) ", curGlyphPtr->left, curGlyphPtr->top);
		top = MIN(top, curGlyphPtr->top);
		left = MIN(left, curGlyphPtr->left);
		bottom = MAX(bottom, curGlyphPtr->bottom);
		right = MAX(right, curGlyphPtr->right);
	} // each glyph on line
	aLine->top = top;
	aLine->leftBorder = left;
	aLine->bottom = bottom;
	aLine->rightBorder = right;
	// fprintf(stderr, "\n");
} // adjustLineStats

int verticallyClose(glyph_t *aGlyph, textLine *aLine, textLine *nextLine) {
	// we might join aGlyph with aLine, if it is close, and nextLine isn't
	// better
	if (aLine->end == aLine->glyphs) return true; // aLine is empty
	// glyph_t *otherGlyph = aLine->end;
	if (aLine->bottom >= aGlyph->top && 
			aLine->bottom <= aGlyph->bottom)
		return true; // aGlyph within aLine
	if (aGlyph->bottom >= aLine->top &&
			aGlyph->bottom <= aLine->bottom)
		return true; // aLine within aGlyph
	/*
	if (MIN(abs(aGlyph->top - aLine->bottom),
			abs(aGlyph->bottom - aLine->top)) < glyphHeight/3) 
		return true;  // fairly close vertically
	*/
	int newHeight = // result of combining
		MAX(aGlyph->bottom, aLine->bottom) - MIN(aGlyph->top, aLine->top);
	int oldHeight = // bigger of the two things we want to combine
		MAX(aLine->bottom - aLine->top, aGlyph->bottom - aGlyph->top);
	if (newHeight < oldHeight * 1.3) {
		if (nextLine) {
			if (nextLine->top - aGlyph->bottom < aGlyph->top - aLine->bottom) {
				fprintf(stderr,
					"glyph (%d,%d) is closer to next line (%d < %d)\n",
					aGlyph->left, aGlyph->top,
					nextLine->top - aGlyph->bottom,
					aGlyph->top - aLine->bottom);
				return false;
			}
		}
		return true; // including aGlyph won't make line too big
	}
	fprintf(stderr, "not close enough.  glyph at left,top (%d,%d) "
		" would make a new height of %d.  Line is at y=[%d,%d]\n",
		aGlyph->left, aGlyph->top, newHeight, aLine->top, aLine->bottom);
	return false;	
} // verticallyClose

lineHeaderList *newLineHeader() {
	lineHeaderList *answer = 
		(lineHeaderList *) malloc(sizeof(lineHeaderList));
	answer->line = (textLine *) malloc(sizeof(textLine));
	answer->line->glyphs = answer->line->end = // dummy at start
		(glyph_t *) calloc(sizeof(glyph_t), 1);
	answer->line->glyphs->next = NULL;
	answer->line->top = -1; // that is, undefined
	answer->line->bottom = -1; // that is, undefined
	answer->next = NULL;
	return answer;
} // newLineHeader

lineHeaderList *combineLines(lineHeaderList *curLine) { // combine with next.
	// we might end up with multiple lines (usually 1, sometimes 2, even 3).
	// We returned a pointer to the last of these lines; we relink curLine to
	// properly point to them all.
	// showGlyphs(curLine->line, "line 1 of 2");
	// showGlyphs(curLine->next->line, "line 2 of 2");
	// showLines();
	// the second line tends to be the shorter one; take its glyphs and
	// place them in the first line.
	textLine *firstLine = curLine->line;
	glyph_t *firstGlyph = firstLine->glyphs->next;
	textLine *secondLine = curLine->next->line;
	glyph_t *secondGlyph = secondLine->glyphs->next;
	lineHeaderList *newHeader = newLineHeader();
	while (firstGlyph || secondGlyph) { // treat one glyph
		// currentGlyph = leftmost input glyph
		glyph_t *currentGlyph =
			firstGlyph == NULL ? secondGlyph :
			secondGlyph == NULL ? firstGlyph :
			firstGlyph->left < secondGlyph->left ? firstGlyph :
			secondGlyph;
		if (currentGlyph == firstGlyph) {
			firstGlyph = firstGlyph->next;
		} else {
			secondGlyph = secondGlyph->next;
		}
		currentGlyph->next = NULL;
		// fprintf(stderr, "working on glyph x=[%d,%d] y=[%d,%d] \n",
		// 	currentGlyph->left, currentGlyph->right,
		// 	currentGlyph->top, currentGlyph->bottom
		// 	);
		// currentLine = proper output line to use
		lineHeaderList *currentLine = newHeader;
		while (!verticallyClose(currentGlyph, currentLine->line,
				currentLine->next ? currentLine->next->line : NULL)) {
			if (!currentLine->next) { // need to make another line
				// fprintf(stderr, "adding another line in combination\n");
				currentLine->next = newLineHeader();
			}
			currentLine = currentLine->next;
		}
		currentLine->line->end->next = currentGlyph;
		if (currentLine->line->top == -1) {
			currentLine->line->top = currentGlyph->top;
			currentLine->line->bottom = currentGlyph->bottom;
		} else {
			currentLine->line->top =
				MIN(currentGlyph->top, currentLine->line->top);
			currentLine->line->bottom =
				MAX(currentGlyph->bottom, currentLine->line->bottom);
		}
		currentLine->line->end = currentLine->line->end->next;
	} // treat glyph
	// showGlyphs(newHeader->line, "contents of first");
	// relink everything
	lineHeaderList *lastHeader; // end of new headers
	numLines -= 1;
	for (lastHeader = newHeader; lastHeader->next; lastHeader=lastHeader->next){
		numLines += 1;
	}
	lastHeader->next = curLine->next->next;
	free(curLine->line->glyphs); // rest of chain is already relinked
	free(curLine->line);
	curLine->line = newHeader->line; // we need to preserve curLine itself
	free(curLine->next->line->glyphs); // rest of chain is already relinked
	free(curLine->next->line); // no need to preserve curLine->next
	free(curLine->next);
	curLine->next = newHeader->next;
	// free(newHeader);
	lineHeaderList *ptr;
	for (ptr = curLine; ptr != lastHeader->next; ptr = ptr->next) {
		adjustLineStats(ptr->line);
	}
	// BUG:  The lines might be out of order.
	if (curLine->line == lastHeader->line) {
		free(newHeader);
		return(curLine);
	} else {
		free(newHeader);
		return(lastHeader);
	}
} // combineLines

lineHeaderList *combineLinesOld(lineHeaderList *curLine) { // combine with next.
	// return: (1) if completely combined, pointer to resulting line.
	// (2) otherwise, pointer to second line.
	// showGlyphs(curLine->line, "line 1 of 2");
	// showGlyphs(curLine->next->line, "line 2 of 2");
	// showLines();
	// the second line tends to be the shorter one; take its glyphs and
	// place them in the first line.
	lineHeaderList *removed = curLine->next;
	curLine->next = removed->next;
	glyph_t *thisGlyph, *nextGlyph;
	thisGlyph = removed->line->glyphs->next;
	// establish secondLine, which we may need for non-combinable glyphs
	lineHeaderList *secondLine =
		(lineHeaderList *) malloc(sizeof(lineHeaderList));
	secondLine->line = (textLine *) malloc(sizeof(textLine));
	secondLine->line->glyphs = secondLine->line->end =
		(glyph_t *) malloc(sizeof(glyph_t));
	secondLine->line->glyphs->next = NULL;
	secondLine->next = NULL;
	while (thisGlyph) { // place thisGlyph in curLine
		// fprintf(stderr, "trying to place glyph at [%d,%d]\n",
		// 	thisGlyph->left, thisGlyph->right);
		nextGlyph = thisGlyph->next;
		thisGlyph->next = NULL;
		glyph_t *curGlyphPtr;
		for (curGlyphPtr = curLine->line->glyphs; curGlyphPtr->next; 
				curGlyphPtr = curGlyphPtr->next) { // each glyph on line
			// starting with the dummy at head of line!
			if (thisGlyph->right < curGlyphPtr->next->left) {
				// fprintf(stderr, "position is appropriate: [%d,%d]\n",
				// 	curGlyphPtr->next->left, curGlyphPtr->next->right);
				break; // we found the right position in line
			}
		} // each known glyph on line
		if (thisGlyph->top - curGlyphPtr->bottom > glyphHeight/2) {
			// not vertically close; place at end of second line
			// fprintf(stderr,
			// 	"glyph at (%d-%d,%d-%d) is pretty far from neighbor (%d-%d,%d-%d)\n",
			// 	thisGlyph->left, thisGlyph->right, thisGlyph->top, thisGlyph->bottom,
			// 	curGlyphPtr->left, curGlyphPtr->right, curGlyphPtr->top, curGlyphPtr->bottom
			// 	);
			thisGlyph->next = NULL;
			secondLine->line->end->next = thisGlyph;
			secondLine->line->end = thisGlyph;
			// adjustLineStats(secondLine->line); // for debugging
			// showGlyphs(secondLine->line, "second line has");
		} else {
			thisGlyph->next = curGlyphPtr->next;
			curGlyphPtr->next = thisGlyph; // whether we fell off the end or not
		}
		thisGlyph = nextGlyph;
	} // place thisGlyph in curLine
	free((void *) removed);
	// don't refillLine(curLine); we don't have any tuples yet.
	// showGlyphs(curLine->line, "after joining");
	// showLines();
	// adjust return values
	if (secondLine->line->glyphs->next == NULL) {
		// did not use second line
		fprintf(stderr, "did not use second line\n");
		free(secondLine->line->glyphs);
		free(secondLine->line);
		free(secondLine);
	 	adjustLineStats(curLine->line);
		numLines -= 1;
		return(curLine);
	} else { // used second line
		fprintf(stderr, "used second line\n");
		secondLine->next = curLine->next;
		curLine->next = secondLine;
		adjustLineStats(secondLine->line);
		adjustLineStats(curLine->line);
		if (secondLine->line->top < curLine->line->top) { // out of order
			fprintf(stderr, "need to reorder lines\n");
			textLine *tmp = curLine->line;
			curLine->line = secondLine->line;
			secondLine->line = tmp;
			adjustLineStats(secondLine->line);
			adjustLineStats(curLine->line);
		} // out of order
		// showLines(lineHeaders->next);
		return(secondLine);
	} // used second line
} // combineLinesOld

void copyGlyph(glyph_t *glyphPtr, lineHeaderList *theLineList) {
	lineHeaderList *curLineHeader;
	// Copy to the end of the line whose last glyph is close to glyphPtr.
	// If none, start a new line.
	glyph_t *newGlyph = (glyph_t *) malloc(sizeof(glyph_t));
	memcpy(newGlyph, glyphPtr, sizeof(glyph_t));
	newGlyph->next = NULL;
	for (curLineHeader = theLineList; curLineHeader->next;
			curLineHeader = curLineHeader->next) { // each known line
		textLine *tryLine = curLineHeader->next->line;
		glyph_t *prevGlyph = tryLine->end;
		// int xdistance = abs(newGlyph->left - prevGlyph->right);
		int ydistance = 
			MIN(abs(newGlyph->top - prevGlyph->top),
				abs(newGlyph->bottom - prevGlyph->bottom));
		// if (xdistance > glyphWidth * 10) continue;
		if (ydistance > 2*glyphHeight / 3) continue;
		// fprintf(stderr, "<%d>", ydistance);
		prevGlyph->next = newGlyph;
		tryLine->end = newGlyph;
		tryLine->top = MIN(tryLine->top, newGlyph->top);
		tryLine->leftBorder = MIN(tryLine->leftBorder, newGlyph->left);
		tryLine->bottom = MAX(tryLine->bottom, newGlyph->bottom);
		tryLine->rightBorder = MAX(tryLine->rightBorder, newGlyph->right);
		return;
	} // each line
	// none of the lines works.  Build a new one.
	// fprintf(stderr, "<!>");
	for (curLineHeader = theLineList; curLineHeader->next;
			curLineHeader = curLineHeader->next) { // each known line
		// sort by line top
		if (curLineHeader->next->line->top > newGlyph->top) break;
		// fprintf(stderr, "Not this line (%d <= %d)\n",
		// 	curLineHeader->line->top, newGlyph->top);
	}
	// place after curLineHeader.
	lineHeaderList *newLineHeader;
	newLineHeader = (lineHeaderList *) malloc(sizeof(lineHeaderList));
	newLineHeader->next = curLineHeader->next;
	curLineHeader->next = newLineHeader;
	newLineHeader->line = (textLine *) malloc(sizeof(textLine));
	newLineHeader->line->glyphs = malloc(sizeof(glyph_t)); // dummy
	newLineHeader->line->glyphs->next = newGlyph;
	newLineHeader->line->end = newGlyph;
	newLineHeader->line->top = newGlyph->top;
	newLineHeader->line->leftBorder = newGlyph->left;
	newLineHeader->line->bottom = newGlyph->bottom;
	newLineHeader->line->rightBorder = newGlyph->right;
} // copyGlyph

void splitLine(lineHeaderList *curLineHeader) {
	// curLineHeader is too tall; it may contain several lines.
	// return;
	glyph_t *glyphPtr;
	lineHeaderList *newLineHeader;
	newLineHeader = (lineHeaderList *) malloc(sizeof(lineHeaderList));
	newLineHeader->next = NULL;
	// fprintf(stderr, "glyphWidth = %d, glyphHeight = %d\n", glyphWidth,
	// 	glyphHeight);
	for (glyphPtr = curLineHeader->line->glyphs->next; glyphPtr;
				glyphPtr = glyphPtr->next){
		copyGlyph(glyphPtr, newLineHeader); // memory leak, but acceptable
	} // each glyph
	// fprintf(stderr, "\n");
	// showLines(newLineHeader);
	int count = 0;
	lineHeaderList *aLineHeader;
	// move to end of new lines in order to link properly
	for (aLineHeader = newLineHeader; aLineHeader->next;
			aLineHeader=aLineHeader->next) {
		count += 1;
		// fprintf(stderr,
		// 	"after splitting line, line %d with y range %d-%d\n",
		// 	count, aLineHeader->next->line->top,
		// 	aLineHeader->next->line->bottom);
		// showGlyphs(aLineHeader->next->line, "the glyphs");
	}
	aLineHeader->next = curLineHeader->next;
	curLineHeader->line = newLineHeader->next->line;
	curLineHeader->next = newLineHeader->next->next;
	refillLine(curLineHeader);
	if (curLineHeader->next) refillLine(curLineHeader->next);
} // splitLine

int leftBorder; // saved between calls to findLines

// discover the lines for a given column out of all the columns.
// columns == 1: column is 0
// else: columns-1, columns-2, ..., 0
int findLines(int column) { // returns Boolean for success
	// statistics
	leftMargin = INFINITY; // over-estimate
	rightMargin = 0; // under-estimate
	// allocation
	lineHeaders = (lineHeaderList *) malloc(sizeof(lineHeaderList));
	bzero(lineHeaders, sizeof(*lineHeaders));
	lineHeaders->next = NULL;
	// analysis of the image
	if (columns > 1) {
		int spread = width / (2*columns);
		int rightBorder;
		int tryWidth, tryCount, bestCount;
		int lowBorder, highBorder;
		if (column < columns - 1) {
			rightBorder = leftBorder; // from previous iteration
		} else { // compute highBorder
			highBorder = (column+1) * width / columns;
			bestCount = INFINITY;
			for (tryWidth = highBorder - spread; tryWidth < highBorder + spread;
					tryWidth += 1) {
				tryCount = countNonBlankCol(0, height-1, tryWidth);
				if (tryCount < bestCount) {
					bestCount = tryCount;
					rightBorder = tryWidth;
				}
			} // each potential split point
		} // compute highBorder
		lowBorder = column * width / columns;
		bestCount = INFINITY;
		for (tryWidth = MAX(0,lowBorder - spread);
				tryWidth < MIN(lowBorder + spread, width);
				tryWidth += 1) {
			tryCount = countNonBlankCol(0, height-1, tryWidth);
			if (tryCount < bestCount) {
				bestCount = tryCount;
				leftBorder = tryWidth;
			}
		} // each potential split point
		// fprintf(stdout, "column is %d-%d out of %d\n", leftBorder,
		// 	rightBorder, width - 1);
		findCells(0, height-1, leftBorder, rightBorder);
	} else {
		findCells(0, height-1, 0, width-1);
	}
	fprintf(stderr, "average width %d, height %d\n", glyphWidth, glyphHeight);
	// count lines
	numLines = 0;
	lineHeaderList *curLine;
	for (curLine = lineHeaders->next; curLine; curLine = curLine->next) {
		numLines += 1;
	}
	fprintf(stderr, "There are %d lines\n", numLines);
	int numGlyphs = 0;
	int lineNumber = 0;
	int totalWidth = 0;
	int totalHeight = 0; // sum of individual lines
	for (curLine = lineHeaders->next; curLine; curLine = curLine->next) {
		// combine glyphs that share horizontal space
		// showGlyphs(curLine->line, "contents of line before");
		lineHeaderList *thisLine = curLine;
		while (overlapVertical(thisLine, thisLine->next)) {
			// fprintf(stderr, "joining line %d, y=[%d,%d] with next, top %d\n",
			// 	lineNumber, thisLine->line->top, 
			// 	thisLine->line->bottom,
			// 	thisLine->next->line->top);
			// showGlyphs(thisLine->line, "first line before joining");
			// showGlyphs(thisLine->next->line, "second line before joining");
			thisLine = combineLines(thisLine); // may return second line
			if (thisLine == curLine) {
				// showGlyphs(thisLine->line, "returned first line");
				// fprintf(stderr, "first line is at y=[%d,%d]\n",
				// 	thisLine->line->top, thisLine->line->bottom);
			} else if (thisLine == curLine->next) {
				// showGlyphs(curLine->line, "first of two lines");
				// showGlyphs(thisLine->line, "second of two lines");
			} else {
				// fprintf(stderr, "\treturned new line\n");
			}	
			// fprintf(stderr, "\twe now have %d lines\n", numLines);
		} // while overlapVertical 
		// compute avgHeight so we can split tall lines later
		if (thisLine->next) {
			// fprintf(stderr,
			// 	"adjacent lines don't overlap: y=[%d,%d], y=[%d,%d]\n",
			// 	thisLine->line->top,
			// 	thisLine->line->bottom,
			// 	thisLine->next->line->top,
			// 	thisLine->next->line->bottom);
		};
		int lineHeight = curLine->line->bottom - curLine->line->top;
		totalHeight += lineHeight;
		// fix the lineHeight field of all glyphs on this line, combine horiz.
		glyph_t *glyphPtr;
		int changedLine = true;
		while (changedLine) { // once we combine glyphs we need to do it again.
			changedLine = false;
			for (glyphPtr = curLine->line->glyphs->next; glyphPtr;
					glyphPtr = glyphPtr->next){
				glyphPtr->lineHeight = lineHeight;
				glyph_t *next = glyphPtr->next;
				while (overlapHorizontal(glyphPtr, next)) { // overlap; combine
					// fprintf(stderr, "combining at (%d, %d)\n", glyphPtr->left,
					// 	glyphPtr->top);
					glyphPtr->left = MIN(glyphPtr->left, next->left);
					glyphPtr->right = MAX(glyphPtr->right, next->right);
					glyphPtr->top = MIN(glyphPtr->top, next->top);
					glyphPtr->bottom = MAX(glyphPtr->bottom, next->bottom);
					glyphPtr->next = next->next;
					free(next);
					next = glyphPtr->next;
					changedLine = true;
				} // overlap horizontal
				numGlyphs += 1;
				totalWidth += glyphPtr->right - glyphPtr->left;
				// fprintf(stderr, "[%d]", glyphPtr->right - glyphPtr->left);
			} // each glyph: give it the right height
		} // while line changed
		lineNumber += 1;
	} // each line
	// see if there any very high lines; maybe we should split them
	int lineIndex;
	float avgHeight = ((float) totalHeight)/lineNumber;
	lineIndex = 0;
	for (curLine = lineHeaders->next; curLine; curLine = curLine->next) {
		lineIndex += 1;
		if (curLine->line->bottom - curLine->line->top > 1.5*avgHeight) {
			// fprintf(stderr, "Line %d looks too high: %d (avg is %d).\n",
			// 	lineIndex, curLine->line->bottom - curLine->line->top,
			// 	(int) avgHeight);
			splitLine(curLine);
		} // too high
		glyph_t *glyphPtr;
		for (glyphPtr = curLine->line->glyphs->next; glyphPtr;
				glyphPtr = glyphPtr->next){
			glyphPtr->lineHeight = curLine->line->bottom - curLine->line->top;
		}
	} // each line
	if (numGlyphs == 0) {
		fprintf(stderr, "No letters are found in this image.\n");
		return(false);
	}
	glyphWidth = totalWidth / numGlyphs;
	// fprintf(stderr, "total of %d glyphs; average width %d\n", numGlyphs,
	// 	glyphWidth);
	return(true);
} // findLines

// see if we can find a blank line somewhere near the given row, looking
// not too far afield either up or down.
int scanAbout(int row, int left, int right) {
	int top, bottom;
	int limit = row - averageLineHeight;
	for (top = row; top > limit; top -= 1) { 
		if (isBlankRow(top, left, right)) break;
	} 
	limit = row + averageLineHeight;
	for (bottom = row; bottom < limit; bottom += 1) { 
		if (isBlankRow(bottom, left, right)) break;
	} 
	if (bottom - row < row - top) return(bottom); // going down is closer
	if (bottom - row > row - top) return(top); // going up is closer
	if (bottom == limit) return(row); // no luck up or down
	return(top); // equally good; go up.
} // scanAbout

glyph_t *glyphAtX(textLine *theLine, int row, int col, int verbose) {
	glyph_t *theGlyph;
	for (theGlyph = theLine->glyphs->next; theGlyph;
			theGlyph = theGlyph->next) {
		// fprintf(stdout, "char ");
		// fprintf(stderr, "a glyph at %d-%d\n", theGlyph->left, theGlyph->right);
		if (theGlyph->left <= col && col < theGlyph->right && 
				theGlyph->top <= row && row < theGlyph->bottom) {
			return(theGlyph);
		}
		// we cannot be sure the glyphs are sorted by col, so keep looking
	} // each glyph
	if (verbose) {
		fprintf(stderr, "on line with y in [%d, %d]\n",
			theLine->top, theLine->bottom);
		fprintf(stderr, "Got to end of line\n");
	}
	return(NULL);
} // glyphAtX

// return the glyph at the given row, column; NULL if none
glyph_t *glyphAtXY(int col, int row, int verbose) {
	// fprintf(stderr, "looking for x=%d, y=%d\n", col, row);
	lineHeaderList *curLine;
	glyph_t *answer = NULL;
	for (curLine = lineHeaders->next; curLine; curLine = curLine->next) {
		if (verbose) {
			fprintf(stderr, "y range [%d,%d]\n", curLine->line->top,
				curLine->line->bottom);
		}
		if (curLine->line->top <= row && row < curLine->line->bottom) {
			answer = glyphAtX(curLine->line, row, col, verbose);
			if (answer) return(answer);
		}
		// if (row < curLine->line->top) return(NULL); // too far
	} // each line
	// fprintf(stdout, "most likely line %d, y value %d-%d\n", lineIndex,
	// 	curLine->line->top, curLine->line->bottom);
	if (verbose) {
		fprintf(stderr, "past the last line on page\n");
	}
	return(NULL);
} // glyphAtXY

void splitWideGlyphs() {
	// look at tmp/sutskever/nybc202166_0011.tif, yud-resh cluster.
	// any glyph that looks very wide is worth splitting, based on classifier.
	lineHeaderList *curLine;
	for (curLine = lineHeaders->next; curLine; curLine = curLine->next) {
		glyph_t *glyphPtr;
		for (glyphPtr = curLine->line->glyphs->next; glyphPtr;
			glyphPtr = glyphPtr->next) {
			// fprintf(stderr, "looking at glyph starting at %d, width %d\n",
			// 	glyphPtr->left, glyphPtr->right - glyphPtr->left + 1);
			if (glyphPtr->right - glyphPtr->left > splittable*glyphWidth &&
					strcmp(ocrValue(glyphPtr->tuple), OCRFAILS) == 0) {
				// fprintf(stderr, "\tMight want to split glyph at (%d,%d)-(%d,%d)\n",
				// 	glyphPtr->left, glyphPtr->top, glyphPtr->right, glyphPtr->bottom);
				glyph_t *first, *second;
				first = (glyph_t *) malloc(sizeof(glyph_t));
				second = (glyph_t *) malloc(sizeof(glyph_t));
				int splitPoint, bestSplitPoint;
				float bestCost = 2*minMatch;
				float firstCost = 2*minMatch;
				for (splitPoint = glyphPtr->left + minGlyphWidth;
						splitPoint < glyphPtr->right - minGlyphWidth;
						splitPoint += 1) { // try this splitPoint
					*first = *glyphPtr;
					*second = *glyphPtr;
					first->right = splitPoint-(minGlyphWidth/2);
						// - to avoid noise right at the split
					second->left = splitPoint+(minGlyphWidth/2);
						// + to avoid noise right at the split
					// adjust bounds of first and second
					while (isBlankRow(first->top, first->left, first->right)) {
						first->top += 1;
					}
					while (isBlankRow(first->bottom-1, first->left, first->right)) {
						first->bottom -= 1;
					}
					while (isBlankRow(second->top, second->left, second->right)) {
						second->top += 1;
					}
					while (isBlankRow(second->bottom-1, second->left,
							second->right)) {
						second->bottom -= 1;
					}
					first->tuple = newTuple();
					fillTuple(first, first->tuple);
					second->tuple = newTuple();
					fillTuple(second, second->tuple);
					float theDistance = ocrDistance(first->tuple) + ocrDistance(second->tuple);
					// float theDistance = ocrDistance(first->tuple);
					if (theDistance <= bestCost) {
						bestCost = theDistance;
						firstCost = ocrDistance(first->tuple);
						// fprintf(stderr, "\tsplitPoint %d firstCost %f theDistance %f\n",
						// 	splitPoint, firstCost, theDistance);
						bestSplitPoint = splitPoint;
					}
					free(first->tuple);
					free(second->tuple);
				} // each splitpoint
				if (firstCost < minMatch) { // looks like success
					// fprintf(stderr, "\tsplitting at %d\n", bestSplitPoint);
					*first = *glyphPtr;
					*second = *glyphPtr;
					first->right = bestSplitPoint-(minGlyphWidth/2);
					second->left = bestSplitPoint+(minGlyphWidth/2);
					// adjust bounds of first and second
					while (isBlankRow(first->top, first->left, first->right)) {
						first->top += 1;
					}
					while (isBlankRow(first->bottom-1, first->left, first->right)) {
						first->bottom -= 1;
					}
					while (isBlankRow(second->top, second->left, second->right)) {
						second->top += 1;
					}
					while (isBlankRow(second->bottom-1, second->left,
							second->right)) {
						second->bottom -= 1;
					}
					first->tuple = newTuple();
					fillTuple(first, first->tuple);
					second->tuple = newTuple();
					fillTuple(second, second->tuple);
					// previous glyph points to *glyphPtr, so we retain it.
					second->next = glyphPtr->next;
					free(glyphPtr->tuple);
					*glyphPtr = *first;
					glyphPtr->next = second;
					free(first);
				} else { // failed to split
					// fprintf(stderr, "\tnot splitting; first cost %f, minmatch %f\n",
					// 	firstCost, minMatch);
					free(first);
					free(second);
				}
			} // might want to split
		} // each glyph on the line	
	} // each line
} // splitWideGlyphs

void narrowGlyphs() {
	// if there are two adjacent narrow unrecognizable glyphs, consider
	// combining them.
	lineHeaderList *curLine;
	for (curLine = lineHeaders->next; curLine; curLine = curLine->next) {
		glyph_t *glyphPtr;
		for (glyphPtr = curLine->line->glyphs->next; glyphPtr;
			glyphPtr = glyphPtr->next) {
			// fprintf(stderr, "looking at glyph starting at %d, width %d\n",
			// 	glyphPtr->left, glyphPtr->right - glyphPtr->left + 1);
			if (glyphPtr->right - glyphPtr->left < glyphWidth/2 &&
					ocrDistance(glyphPtr->tuple) > minMatch && 
					glyphPtr->next &&
					glyphPtr->next->right - glyphPtr->next->left < glyphWidth/2 &&
					ocrDistance(glyphPtr->next->tuple) > minMatch) {
				glyph_t *second = glyphPtr->next;
				int oldRight = glyphPtr->right;
				int oldTop = glyphPtr->top;
				int oldBottom = glyphPtr->bottom;
				fprintf(stderr, "combine horizontal glyph at (%d,%d)"
					" with glyph at (%d,%d)? ...",
					glyphPtr->left, glyphPtr->top, second->left, second->top);
				glyphPtr->right = second->right;
				glyphPtr->top = MIN(glyphPtr->top, second->top);
				glyphPtr->bottom = MAX(glyphPtr->bottom, second->bottom);
				tuple_t testTuple = newTuple();
				fillTuple(glyphPtr, testTuple);
				if (ocrDistance(testTuple) < minMatch) { 
					fprintf(stderr, "combining\n");
					free(glyphPtr->tuple);
					glyphPtr->tuple = testTuple;
					glyphPtr->next = second->next;
					free(second->tuple);
					free(second);
				} else { // failed to combine
					fprintf(stderr, "not combining\n");
					free(testTuple);
					glyphPtr->right = oldRight;
					glyphPtr->top = oldTop;
					glyphPtr->bottom = oldBottom;
				}
			} // might want to combine
		} // each glyph on the line	
	} // each line
} // narrowGlyphs

void freeLines() {
	lineHeaderList *curLine, *prevLine;
	curLine = NULL;
	prevLine = curLine;
	for (curLine = lineHeaders->next; curLine; curLine = curLine->next) {
		glyph_t *glyphPtr, *prevPtr;
		prevPtr = curLine->line->glyphs;
		int first = 1;
		for (glyphPtr = curLine->line->glyphs->next; glyphPtr;
				glyphPtr = glyphPtr->next) {
			if (!first) free(prevPtr->tuple);
			free(prevPtr);
			prevPtr = glyphPtr;
			first = 0;
		} // each glyph
		if (prevPtr) free(prevPtr);
		// free(prevLine->line);
		free(prevLine); // has no effect if prevLine == NULL
		prevLine = curLine;
	} // each line
	if (prevLine) {
		// free(prevLine->line);
		free(prevLine);
	}
} // freeLines
